(window.webpackJsonp=window.webpackJsonp||[]).push([[203],{296:function(e,t,s){"use strict";s.r(t);var i=s(0),a=Object(i.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this.$createElement,t=this._self._c||e;return t("div",{staticClass:"content"},[t("h1",{attrs:{id:"person"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#person","aria-hidden":"true"}},[this._v("#")]),this._v(" Person")]),t("p",[this._v('This simple class illustrates and introduces the idea of encapsulation (private fields with public properties). This example does not have a constructor. This example includes a driver. The driver is also used to illustrate how, with only fields & getter/setter methods, an object can be in an "unknown" (and invalid) state as soon as it is created; this idea is introduced to show the need for a constructor, and opens the discussion of the idea of a "default constructor".')]),t("p",[t("img",{attrs:{src:"C-Person.png",alt:"Person Class Diagram"}})])])}],!1,null,null,null);t.default=a.exports}}]);