(window.webpackJsonp=window.webpackJsonp||[]).push([[38],{507:function(i,t,e){"use strict";e.r(t);var a=e(0),s=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var i=this,t=i.$createElement,e=i._self._c||t;return e("div",{staticClass:"content"},[e("h1",{attrs:{id:"topic-n-modularization-and-utility-classes"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#topic-n-modularization-and-utility-classes","aria-hidden":"true"}},[i._v("#")]),i._v(" Topic N - Modularization and Utility Classes")]),e("h2",{attrs:{id:"overview"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#overview","aria-hidden":"true"}},[i._v("#")]),i._v(" Overview")]),e("p",[i._v('This topic examines the technique of modularization as a way to simplify complex logic. In addition, this topic looks at the use of "utility" classes to aid in simplifying code and enabling better "code-reuse" for repetitive tasks. This technique of "simplifying" complex logic is also known as "refactoring".')]),e("p",[i._v("Modularization will be examined in the context of simplifying the internal working of a class’ methods and in the context of organizing and simplifying a driver. For classes, modularization is simply taking any repetitive or overly-complex code out of the class’ existing methods and placing that code inside of private methods. For console drivers (which typically consist of static methods), "),e("em",[e("strong",[i._v("to be continued...")])])]),e("h3",{attrs:{id:"logs"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#logs","aria-hidden":"true"}},[i._v("#")]),i._v(" LOGs")])])}],!1,null,null,null);t.default=s.exports}}]);