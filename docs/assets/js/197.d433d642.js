(window.webpackJsonp=window.webpackJsonp||[]).push([[197],{318:function(e,t,s){"use strict";s.r(t);var a=s(0),n=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"c-–-starting-classes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#c-–-starting-classes","aria-hidden":"true"}},[e._v("#")]),e._v(" C – Starting Classes")]),s("h2",{attrs:{id:"overview"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#overview","aria-hidden":"true"}},[e._v("#")]),e._v(" Overview")]),s("p",[e._v("This topic introduces some of the basic syntax and grammar surrounding Object-Oriented Programming in C#. The following keywords are introduced. (Note that additional keywords from previous topics may also be present.)")]),s("p",[e._v("• private\n• this\n• bool\n• true\n• false\n• DateTime")]),s("p",[e._v("This topic will also introduce the following grammars, syntax and language constructs. (Note that additional concepts from previous topics may also be present.)")]),s("p",[e._v("• Private fields (encapsulation)\n• Public properties (encapsulation)\n• Constructor syntax\n• Object instantiation with parameterized constructors\n• Overriding the Object's ToString() method")]),s("h3",{attrs:{id:"daily-logs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#daily-logs","aria-hidden":"true"}},[e._v("#")]),e._v(" Daily LOGs")]),s("p",[e._v("The following daily LOGs are covered in this package.")]),s("h4",{attrs:{id:"oop-basics"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#oop-basics","aria-hidden":"true"}},[e._v("#")]),e._v(" OOP Basics")]),s("p",[e._v('• Define the term "encapsulation" as used in OOP\n• Explain why encapsulation is a good design principle\n• Define the term “access specifier” and identify where it occurs in the code for a class\n• List the two access specifiers that are used in this course\n• Describe the difference between “private” and “public” members of a class\n• Describe the concepts of "properties" as used in OOP\n• Define the term "backing store" as it applies to properties and fields\n• Describe and explain the purpose and function of a constructor for a class\n• Describe the syntax of a class constructor\n• Identify when a class constructor is “called”\n• Define the term "class scope" as used in OOP\n• Define the term "local scope" as used in OOP\n• Define the term "state" as applied to objects used in OOP\n• Define the term “override” as used in OOP\n• Explain the purpose and function of the ToString() method and why we sometimes want to change its default behaviour when we create classes'),s("br"),e._v("\n• Create simple class diagrams to represent classes")]),s("h4",{attrs:{id:"general-programming-concepts-and-terms"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#general-programming-concepts-and-terms","aria-hidden":"true"}},[e._v("#")]),e._v(" General Programming Concepts and Terms")]),s("p",[e._v("• List three levels of scope")])])}],!1,null,null,null);t.default=n.exports}}]);