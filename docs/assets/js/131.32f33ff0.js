(window.webpackJsonp=window.webpackJsonp||[]).push([[131],{190:function(t,n,a){"use strict";a.r(n);var s=a(0),o=Object(s.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,n=t.$createElement,a=t._self._c||n;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"fraction"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fraction","aria-hidden":"true"}},[t._v("#")]),t._v(" Fraction")]),a("p",[t._v("The fraction class avoids the division by zero error by ensuring that the supplied denominator is not zero.")]),a("p",[a("strong",[t._v("Problem Statement")])]),a("p",[t._v("Write the code for the Fraction class. The solution must meet the following requirements (new requirements are in "),a("strong",[t._v("bold")]),t._v("):")]),a("ul",[a("li",[t._v('Should get the string representation of the fraction, as "numerator/denominator"')]),a("li",[t._v("Should get the numeric value of the fraction (as a real number)")]),a("li",[t._v("Should get the reciprocal of the fraction")]),a("li",[t._v("Should get the numerator and denominator")]),a("li",[t._v("Should add another fraction to its existing value")]),a("li",[t._v("Should subtract another fraction from its existing value")]),a("li",[t._v("Should multiply its existing value by another fraction")]),a("li",[t._v("Should divide its existing value by another fraction")]),a("li",[t._v("Should affix the sign for negative fractions onto the numerator only")]),a("li",[t._v("Should identify if the fraction is a proper fraction")]),a("li",[a("strong",[t._v("Should reject zero denominators")])])]),a("p",[t._v("Use the following class diagram when creating your solution.")]),a("p",[a("img",{attrs:{src:"G-Fraction.png",alt:""}})]),a("div",{staticClass:"language-csharp extra-class"},[a("pre",{pre:!0,attrs:{class:"language-csharp"}},[a("code",[t._v("    "),a("span",{attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("Fraction")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" numerator"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("int")]),t._v(" denominator"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("denominator "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),a("span",{attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("System"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Exception")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"A fraction cannot have a denominator of zero (0)"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        Numerator "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" numerator"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        Denominator "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" denominator"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{attrs:{class:"token function"}},[t._v("FixSign")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}],!1,null,null,null);n.default=o.exports}}]);