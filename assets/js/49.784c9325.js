(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{283:function(t,a,n){t.exports=n.p+"assets/img/E-Account.23274846.png"},481:function(t,a,n){"use strict";n.r(a);var s=n(17),e=Object(s.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"account"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#account"}},[t._v("#")]),t._v(" Account")]),t._v(" "),s("p",[t._v('This class illustrates simple addition and calculation by allowing deposits and withdrawals. Note that changes to the balance can now only be made through deposits and withdrawals; the balance is now "read-only".')]),t._v(" "),s("p",[s("strong",[t._v("Problem Statement")])]),t._v(" "),s("p",[t._v("Write the code that will represent a simple bank account.")]),t._v(" "),s("p",[t._v("The solution must meet the following requirements (new requirements are in "),s("strong",[t._v("bold")]),t._v("):")]),t._v(" "),s("ul",[s("li",[t._v("Should get the bank name, branch number, institution number, account number, balance, overdraft limit, and account type")]),t._v(" "),s("li",[t._v("Should allow the overdraft limit to be set")]),t._v(" "),s("li",[s("strong",[t._v("Should support deposits and withdrawals")])])]),t._v(" "),s("p",[t._v("Use the following class diagram when creating your solution.")]),t._v(" "),s("p",[s("img",{attrs:{src:n(283),alt:"Account Class Diagram"}})]),t._v(" "),s("div",{staticClass:"language-csharp extra-class"},[s("pre",{pre:!0,attrs:{class:"language-csharp"}},[s("code",[t._v("  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Withdraw")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" amount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      Balance "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-=")]),t._v(" amount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Deposit")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("double")]),t._v(" amount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      Balance "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" amount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);