(window.webpackJsonp=window.webpackJsonp||[]).push([[118],{327:function(t,s,n){"use strict";n.r(s);var a=n(0),e=Object(a.a)({},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"content"},[t._m(0),t._v(" "),n("p",[t._v("Console applications are often used as a means to learn how to program. In such applications, user input and output is solely text-based.")]),t._v(" "),t._m(1),t._v(" "),n("p",[t._v("For example, try the following:")]),t._v(" "),t._m(2),t._v(" "),t._m(3),t._m(4),t._v(" "),t._m(5),t._m(6),t._v(" "),t._m(7),t._m(8),t._v(" "),t._m(9),t._v(" "),t._m(10),t._m(11),t._v(" "),t._m(12),t._m(13),t._v(" "),t._m(14),t._v(" "),t._m(15),n("p",[t._v("Since version 6 of the C# programming language, a cleaner alternative to these formatting approaches is available. It's called "),n("a",{attrs:{href:"https://docs.microsoft.com/en-us/dotnet/csharp/language-reference/tokens/interpolated",target:"_blank",rel:"noopener noreferrer"}},[n("strong",[t._v("string interpolation")]),n("OutboundLink")],1),t._v(". Using string interpolation, the code could have been written as")]),t._v(" "),t._m(16),n("p",[t._v("String interpolation is indicated by the dollar sign immediately preceeding the literal string. This way of concatenating string values has the benefit of being easier to read and understand where variable values are being inserted into the text.")])])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"interlude-1-console-input-output"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#interlude-1-console-input-output","aria-hidden":"true"}},[this._v("#")]),this._v(" Interlude 1 - Console Input/Output")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("Sending text to the console is done through the "),s("code",[this._v("Console")]),this._v(" class' "),s("code",[this._v(".Write()")]),this._v(" and "),s("code",[this._v(".WriteLine()")]),this._v(" methods. Simply pass some value into the those methods, and it will be displayed on the screen.")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ol",[n("li",[t._v("Create a C# console application named "),n("strong",[t._v("UserIO")]),t._v(".")]),t._v(" "),n("li",[t._v("Modify the "),n("em",[t._v("Program.cs")]),t._v(" file's "),n("code",[t._v("Main()")]),t._v(" method to match the following.")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-csharp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-csharp"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("Main")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("string")]),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    System"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Console"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("WriteLine")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"Hello World"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    System"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Console"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("Write")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"The following text is output "')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    System"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Console"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("Write")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"on the same line."')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    System"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Console"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("WriteLine")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ol",{attrs:{start:"3"}},[s("li",[this._v("Run the program (press "),s("kbd",[this._v("Ctrl")]),this._v(" + "),s("kbd",[this._v("F5")]),this._v(") and observe the output, which should look something like this:")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("Hello World\nThe following text is output on the same line.\nPress any key to continue...\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("User input is performed by calling the "),s("code",[this._v(".ReadLine()")]),this._v(" method, which will return a string. You use the method by storing the resulting user input into a variable. Modify your "),s("strong",[this._v("UserIO")]),this._v(" program above by adding the following lines to the end of the "),s("code",[this._v("Main()")]),this._v(" method.")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-csharp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-csharp"}},[n("code",[t._v("    System"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Console"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("Write")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"Type in your name and press [Enter]: "')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("string")]),t._v(" name "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" System"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Console"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("ReadLine")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    System"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Console"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("WriteLine")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"Hello "')]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" name"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v('Asking the user to input enter information is referred to as "prompting" the user. The text output in the code '),s("code",[this._v('.Write("Type in your name and press [Enter]: ")')]),this._v(' above is called the "user prompt". To complete the "prompting", a call to '),s("code",[this._v(".ReadLine()")]),this._v(" will capture the user's input.")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("Notice also what we have done in the last line. We can take the user's input and concatenate it with the text "),n("code",[t._v('"Hello "')]),t._v(" as we send it back out to the console. "),n("strong",[t._v("String concatenation")]),t._v(' is accomplished by "adding" strings together. The text '),n("code",[t._v('"Hello "')]),t._v(" is a "),n("strong",[t._v("string literal")]),t._v(" while the "),n("code",[t._v("name")]),t._v(" variable holds a string "),n("strong",[t._v("value")]),t._v('. Thus, if the user entered "Dan" when prompted, the output would be')])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"language-text extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v("Hello Dan\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("An alternative to string concatenation is using the "),s("code",[this._v("string.Format()")]),this._v(" method. The "),s("code",[this._v(".Format()")]),this._v(' method works by including a "placeholder" in the string passed in as the first argument. Placeholders are written as a number inside of a set of curly braces. The number corresponds to the position of the arguments sent in after the first argument. Thus, we could have written that line as')])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-csharp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-csharp"}},[n("code",[t._v("    System"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Console"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("WriteLine")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("string")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("Format")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"Hello {0}"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("Notice that the placeholder is "),s("code",[this._v("{0}")]),this._v(". The variable "),s("code",[this._v("name")]),this._v(' is in the "zero-th" position after the literal text. You\'ll have an idea later on when we talk about arrays about why we start the number at 0 instead of 1.')])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("The ."),s("code",[this._v("WriteLine()")]),this._v(" method has a version that allows you to get the same result without calling "),s("code",[this._v("string.Format()")]),this._v(". Basically, this version makes use of the format method internally.")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-csharp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-csharp"}},[n("code",[t._v("    System"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Console"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("WriteLine")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v('"Hello {0}"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"language-csharp extra-class"},[n("pre",{pre:!0,attrs:{class:"language-csharp"}},[n("code",[t._v("    System"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Console"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("WriteLine")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("$"),n("span",{attrs:{class:"token string"}},[t._v('"Hello {name}"')]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])}],!1,null,null,null);e.options.__file="console-1.md";s.default=e.exports}}]);