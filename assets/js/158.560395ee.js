(window.webpackJsonp=window.webpackJsonp||[]).push([[158],{576:function(e,t,s){"use strict";s.r(t);var a=s(0),o=Object(a.a)({},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h1",{attrs:{id:"code-samples"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#code-samples","aria-hidden":"true"}},[e._v("#")]),e._v(" Code Samples")]),e._v(" "),s("p",[e._v("The following examples are used to illustrate this topic.")]),e._v(" "),s("ol",[s("li",[s("router-link",{attrs:{to:"/Topic/C/Examples/Person.html"}},[e._v("Person")]),e._v(' - This simple class illustrates and introduces the idea of encapsulation (private fields with public properties). This example does not have a constructor. This example includes a driver. The driver is also used to illustrate how, with only fields & getter/setter methods, an object can be in an "unknown" (and invalid) state as soon as it is created; this idea is introduced to show the need for a constructor, and opens the discussion of the idea of a "default constructor".')],1),e._v(" "),s("li",[s("router-link",{attrs:{to:"/Topic/C/Examples/Account.html"}},[e._v("Account")]),e._v(' - This simple class also illustrates encapsulation, but with some of the fields being read-only. This necessitates the presence of a constructor. This example includes a driver which shows that a class is in a "known state" as soon as it is created.')],1),e._v(" "),s("li",[s("router-link",{attrs:{to:"/Topic/C/Examples/Student.html"}},[e._v("Student")]),e._v(" - This class reinforces the idea of encapsulation and constructors. It also introduces the idea of overloading the default toString() method that every class inherits from the Object class. This example includes a driver with multiple objects, showing how the use of constructors makes it easier to create many objects in a few lines of code.")],1),e._v(" "),s("li",[s("router-link",{attrs:{to:"/Topic/C/Examples/Company.html"}},[e._v("Employee + Company")]),e._v(' - These are other classes similar to the Person and Student classes, but the Employee class uses Auto-Implemented properties (available since C# 3.0). Lastly, these classes "share" a driver, illustrating the fact that any given "program" typically uses more than one class.')],1)])])},[],!1,null,null,null);t.default=o.exports}}]);