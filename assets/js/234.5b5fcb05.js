(window.webpackJsonp=window.webpackJsonp||[]).push([[234],{630:function(t,i,e){"use strict";e.r(i);var o=e(17),s=Object(o.a)({},(function(){var t=this,i=t.$createElement,e=t._self._c||i;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"topic-n-modularization-and-utility-classes"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#topic-n-modularization-and-utility-classes"}},[t._v("#")]),t._v(" Topic N - Modularization and Utility Classes")]),t._v(" "),e("h2",{attrs:{id:"overview"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#overview"}},[t._v("#")]),t._v(" Overview")]),t._v(" "),e("p",[t._v('This topic examines the technique of modularization as a way to simplify complex logic. In addition, this topic looks at the use of "utility" classes to aid in simplifying code and enabling better "code-reuse" for repetitive tasks. This technique of "simplifying" complex logic is also known as "refactoring".')]),t._v(" "),e("p",[t._v("Modularization will be examined in the context of simplifying the internal working of a class' methods and in the context of organizing and simplifying a driver. For classes, modularization is simply taking any repetitive or overly-complex code out of the class' existing methods and placing that code inside of private methods. For console drivers (which typically consist of static methods), "),e("em",[e("strong",[t._v("to be continued...")])])]),t._v(" "),e("h3",{attrs:{id:"logs"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#logs"}},[t._v("#")]),t._v(" LOGs")])])}),[],!1,null,null,null);i.default=s.exports}}]);