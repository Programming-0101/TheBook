(window.webpackJsonp=window.webpackJsonp||[]).push([[150],{370:function(e,t,s){"use strict";s.r(t);var a=s(0),r=Object(a.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("div",{staticClass:"content"},[s("h1",{attrs:{id:"c-–-starting-classes"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#c-–-starting-classes","aria-hidden":"true"}},[e._v("#")]),e._v(" C – Starting Classes")]),e._v(" "),s("h2",{attrs:{id:"overview"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#overview","aria-hidden":"true"}},[e._v("#")]),e._v(" Overview")]),e._v(" "),s("p",[e._v("This topic introduces some of the basic syntax and grammar surrounding Object-Oriented Programming in C#. The following keywords are introduced. (Note that additional keywords from previous topics may also be present.)")]),e._v(" "),s("p",[e._v("• private"),s("br"),e._v("\n• this"),s("br"),e._v("\n• bool"),s("br"),e._v("\n• true"),s("br"),e._v("\n• false"),s("br"),e._v("\n• DateTime")]),e._v(" "),s("p",[e._v("This topic will also introduce the following grammars, syntax and language constructs. (Note that additional concepts from previous topics may also be present.)")]),e._v(" "),s("p",[e._v("• Private fields (encapsulation)"),s("br"),e._v("\n• Public properties (encapsulation)"),s("br"),e._v("\n• Constructor syntax"),s("br"),e._v("\n• Object instantiation with parameterized constructors"),s("br"),e._v("\n• Overriding the Object's ToString() method")]),e._v(" "),s("h3",{attrs:{id:"daily-logs"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#daily-logs","aria-hidden":"true"}},[e._v("#")]),e._v(" Daily LOGs")]),e._v(" "),s("p",[e._v("The following daily LOGs are covered in this package.")]),e._v(" "),s("h4",{attrs:{id:"oop-basics"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#oop-basics","aria-hidden":"true"}},[e._v("#")]),e._v(" OOP Basics")]),e._v(" "),s("p",[e._v('• Define the term "encapsulation" as used in OOP'),s("br"),e._v("\n• Explain why encapsulation is a good design principle"),s("br"),e._v("\n• Define the term “access specifier” and identify where it occurs in the code for a class"),s("br"),e._v("\n• List the two access specifiers that are used in this course"),s("br"),e._v("\n• Describe the difference between “private” and “public” members of a class"),s("br"),e._v('\n• Describe the concepts of "properties" as used in OOP'),s("br"),e._v('\n• Define the term "backing store" as it applies to properties and fields'),s("br"),e._v("\n• Describe and explain the purpose and function of a constructor for a class"),s("br"),e._v("\n• Describe the syntax of a class constructor"),s("br"),e._v("\n• Identify when a class constructor is “called”"),s("br"),e._v('\n• Define the term "class scope" as used in OOP'),s("br"),e._v('\n• Define the term "local scope" as used in OOP'),s("br"),e._v('\n• Define the term "state" as applied to objects used in OOP'),s("br"),e._v("\n• Define the term “override” as used in OOP"),s("br"),e._v("\n• Explain the purpose and function of the ToString() method and why we sometimes want to change its default behaviour when we create classes"),s("br"),e._v("\n• Create simple class diagrams to represent classes")]),e._v(" "),s("h4",{attrs:{id:"general-programming-concepts-and-terms"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#general-programming-concepts-and-terms","aria-hidden":"true"}},[e._v("#")]),e._v(" General Programming Concepts and Terms")]),e._v(" "),s("p",[e._v("• List three levels of scope")])])}],!1,null,null,null);r.options.__file="ReadMe.md";t.default=r.exports}}]);