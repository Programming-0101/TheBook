(window.webpackJsonp=window.webpackJsonp||[]).push([[141],{392:function(t,s,e){"use strict";e.r(s);var a=e(0),n=Object(a.a)({},function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"a-starting-with-classes"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#a-starting-with-classes","aria-hidden":"true"}},[t._v("#")]),t._v(" A - Starting With Classes")]),t._v(" "),e("div",{staticClass:"tip custom-block"},[e("p",{staticClass:"custom-block-title"},[t._v("Overview & Logs")]),t._v(" "),e("p",[t._v("We are coving a "),e("em",[t._v("lot")]),t._v(" of material here as we introduce OOP programming. That's because we're assuming you've never written any code before. If you want a quick bullet-list of the the keywords and topics covered, see the "),e("router-link",{attrs:{to:"/Topic/A/Overview.html"}},[e("strong",[t._v("Overview")])]),t._v(". If you want to check yourself on what you're learning, run through the "),e("router-link",{attrs:{to:"/Topic/A/LOGs.html"}},[e("strong",[t._v("Learning Outcome Guide")])]),t._v(" for this topic.")],1)]),t._v(" "),e("h2",{attrs:{id:"what-is-a-class"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#what-is-a-class","aria-hidden":"true"}},[t._v("#")]),t._v(" What is a Class?")]),t._v(" "),e("p",[t._v('"A '),e("em",[t._v("computer program")]),t._v(" is a "),e("strong",[t._v("set of instructions")]),t._v(" for manipulating "),e("strong",[t._v("information")]),t._v('." In the world of '),e("em",[t._v("Object Oriented Programming")]),t._v(" (OOP), the main focus is on the "),e("em",[t._v("information")]),t._v(" part of this definition.")]),t._v(" "),e("p",[t._v("The first thing we do with information is to "),e("em",[t._v("classify")]),t._v(" it. And it's from this starting point that we encounter a central keyword in C#.")]),t._v(" "),e("div",{staticClass:"language-csharp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v("\n")])])]),e("p",[t._v("The code we write "),e("em",[t._v("declares")]),t._v(' what things are (information) and how things behave (instructions). These are called "statements", and the first statement we\'ll examine is the '),e("strong",[t._v("class delcaration statement")]),t._v(". The description of this statement is summarized in the "),e("router-link",{attrs:{to:"/Teach/chapter1-7.html#class-definition"}},[t._v("simplified C# grammar")]),t._v(", but here we will look at the simplest possible example.")],1),t._v(" "),e("div",{staticClass:"language-csharp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Nothingness")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("While this is the simplest possible example, it turns out to also be the most useless ("),e("em",[t._v("hint: think of what we called it")]),t._v("). Don't worry, we'll get to better things soon.")]),t._v(" "),e("p",[t._v("I snuck in another C# keyword while you were looking:")]),t._v(" "),e("div",{staticClass:"language-csharp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v("\n")])])]),e("p",[t._v("The "),e("code",[t._v("public")]),t._v(' keyword is an "Access Modifier", but for now just think of it as saying that other parts of our code will be able to access it and use it freely.')]),t._v(" "),e("p",[t._v('A class describes something of interest to our program. Describing things of interest to our program is referred to as "Modeling", and is a big part of '),e("em",[t._v("Object Oriented Design")]),t._v(" (OOD).")]),t._v(" "),e("p",[t._v("Let's take another look at that first class we created.")]),t._v(" "),e("div",{staticClass:"language-csharp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Nothingness")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("The words "),e("code",[t._v("public")]),t._v(" and "),e("code",[t._v("class")]),t._v(" are "),e("em",[t._v("keywords")]),t._v(" - they are built into the C# programming languge. But the "),e("em",[t._v("name")]),t._v(" of the class - "),e("code",[t._v("Nothingness")]),t._v(" - something we made up ourselves. When we declare a class, we have to give it a name; we call that a "),e("strong",[t._v("class name")]),t._v(" because it "),e("em",[t._v("identifies")]),t._v(" the class.")]),t._v(" "),e("p",[t._v("The curly braces "),e("code",[t._v("{ }")]),t._v(' act to "group" what "belongs to" or is "inside of" the class. It\'s like the set operators in math - everything inside the curly braces of the class definition are '),e("em",[t._v("members")]),t._v(" of that class.")]),t._v(" "),e("p",[t._v('Remember how I said that a class is a "blueprint"? The name of the class can be thought of as the name of the blueprint. I also said we were "classifying" information. Our class (blueprint) is a kind (or '),e("em",[t._v("type")]),t._v(") of information. When we declare a class, we are "),e("strong",[t._v("defining a data type")]),t._v(" for our program.")]),t._v(" "),e("p",[t._v("The C# programming language comes with a set of built-in data types as well. Two examples are "),e("code",[t._v("string")]),t._v(" and "),e("code",[t._v("int")]),t._v(". The names "),e("code",[t._v("string")]),t._v(" and "),e("code",[t._v("int")]),t._v(' are keywords of the language, and as such are already defined for us. The built-in data types are "primitive" in nature - they represent the common and '),e("em",[t._v("simple")]),t._v(" types of information that programs typically use. The class data types we declare for ourselves, on the other hand, are "),e("em",[t._v("complex")]),t._v(" in nature.")]),t._v(" "),e("h2",{attrs:{id:"better-than-nothing"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#better-than-nothing","aria-hidden":"true"}},[t._v("#")]),t._v(" Better Than Nothing")]),t._v(" "),e("p",[t._v("Now it's time to see the traditional introductory program "),e("strong",[t._v("Hello World")]),t._v(".")]),t._v(" "),e("div",{staticClass:"language-csharp extra-class"},[e("div",{staticClass:"highlight-lines"},[e("br"),e("br"),e("div",{staticClass:"highlighted"},[t._v(" ")]),e("div",{staticClass:"highlighted"},[t._v(" ")]),e("div",{staticClass:"highlighted"},[t._v(" ")]),e("div",{staticClass:"highlighted"},[t._v(" ")]),e("br"),e("br")]),e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Program")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Main")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        Console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("WriteLine")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello World!"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("p",[t._v("Our class name is called "),e("code",[t._v("Program")]),t._v(", and it has something inside of it: A "),e("strong",[t._v("method declaration")]),t._v('. A method is a "'),e("em",[t._v("set of instructions")]),t._v('". The highlighted lines in the sample above is a method called '),e("code",[t._v("Main")]),t._v(". That's the traditional name given to the place where the program begins (it's the \"main entry point\" of the program). It's the method that's called by the operating system when it runs your program.")]),t._v(" "),e("p",[t._v('All methods follow the same grammar; it\'s the grammar rules of the programming language that determine "what things are". Take a moment to peek at the structure of '),e("router-link",{attrs:{to:"/Teach/chapter1-7.html#method-declarations"}},[t._v("Method Declarations")]),t._v(" before you continue on.")],1),t._v(" "),e("hr"),t._v(" "),e("h2",{attrs:{id:"todo-notes"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#todo-notes","aria-hidden":"true"}},[t._v("#")]),t._v(" TODO Notes")]),t._v(" "),e("ul",[e("li",[e("input",{attrs:{type:"checkbox",id:"checkbox9"}}),e("label",{attrs:{for:"checkbox9"}},[t._v("Create a program in VS Code")])]),t._v(" "),e("li",[e("input",{attrs:{type:"checkbox",id:"checkbox10"}}),e("label",{attrs:{for:"checkbox10"}},[t._v("Discuss the code (keywords)")])])]),t._v(" "),e("div",{staticClass:"language-csharp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("using")]),t._v(" System"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("namespace")]),t._v(" StartHere\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Program")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("Main")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("string")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            Console"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("WriteLine")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hello World!"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),e("h2",{attrs:{id:"let-s-start-coding"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#let-s-start-coding","aria-hidden":"true"}},[t._v("#")]),t._v(" Let's Start Coding")]),t._v(" "),e("h2",{attrs:{id:"avoiding-collisions"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#avoiding-collisions","aria-hidden":"true"}},[t._v("#")]),t._v(" Avoiding Collisions")]),t._v(" "),e("p",[t._v("Given the notion that C# lets us define our own data types, imagine what would")])])},[],!1,null,null,null);s.default=n.exports}}]);