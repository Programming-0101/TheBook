(window.webpackJsonp=window.webpackJsonp||[]).push([[145],{396:function(s,t,e){"use strict";e.r(t);var n=e(0),a=Object(n.a)({},function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"comments"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#comments","aria-hidden":"true"}},[s._v("#")]),s._v(" Comments")]),s._v(" "),e("p",[s._v("This class continues the illustration of the kinds of comments allowed in the programming language. This class builds on the previous example by showing comments for fields as well as methods.")]),s._v(" "),e("div",{staticClass:"language-csharp extra-class"},[e("pre",{pre:!0,attrs:{class:"language-csharp"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/*\n * File:    Comments.cs\n * Author:  Dan Gilleland\n * Date:    2010\n * Purpose: To illustrate multi-line, single-line, and XML comments.\n *          This is a multi-line comment.\n */")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("namespace")]),s._v(" Topic"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("B"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Examples\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <summary>")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Comments illustrates multi-line, single-line, and XML comments.")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </summary>")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <remarks>")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// This class is a stand-alone class used to illustrate comments.")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// This particular XML comment is "attached" to the class as')]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// a whole, while other XML comments are for fields or methods")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// in the class (a few methods and fields have been included for")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// illustration purposes).")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </remarks>")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("class")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Comments")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <summary>")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Here is a simple integer variable that is pre-set to the value 5.")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </summary>")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <remarks>")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// This is an instance member (non-static) of the class.")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </remarks>")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" _five "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("5")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <summary>")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Here is a whole number that is pre-set to the value 0.")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </summary>")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <remarks>")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// This field is a static member of the class.")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </remarks>")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" _instanceCounter "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <summary>")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// Here is a real number that is pre-set to the value 3.14159.")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </summary>")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <remarks>")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// This field is a constant member of the class.")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </remarks>")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("private")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v("  "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("double")]),s._v(" _PI "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("3.14159")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/* ****************** Methods ******************** */")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <summary>")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// This is a method of <see cref="Comments"/>')]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </summary>")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <returns>This method returns a string.</returns>")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("string")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("SimpleMethod")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello World!"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// end of SimpleMethod()")]),s._v("\n\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <summary>")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// This is a one-sentence description of the method.")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </summary>")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v('/// <param name="name">This is where I describe the purpose of this parameter</param>')]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <returns>Here I describe what information is returned from this method.</returns>")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// <remarks>")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// This method has a single parameter.")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("/// </remarks>")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("public")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("static")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("int")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("MethodWithParameter")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("string")]),s._v(" name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n            "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" name"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("Length"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n        "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// end of MethodWithParameter(string)")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// end of Comments class")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])])])])},[],!1,null,null,null);t.default=a.exports}}]);